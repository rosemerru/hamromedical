navigator.serviceWorker.register('https://www.medindia.net/service-worker.js').then(
  function(serviceWorkerRegistration) {
    serviceWorkerRegistration.pushManager.subscribe({userVisibleOnly: true}).then(
      function(pushSubscription) {
        console.log(pushSubscription.endpoint);
		var subscriptionIdNew=pushSubscription.endpoint.replace('https://android.googleapis.com/gcm/send/','');
	fetch('https://www.medindia.net/push-service/syncMedChromeEncryptionKey.asp?browser=notfind&level=main&subscriptionId=' +
    subscriptionIdNew);
	
	var browser = function() {
    // Return cached result if avalible, else get result then cache it.
    if (browser.prototype._cachedResult)
        return browser.prototype._cachedResult;
    // Opera 8.0+
    var isOpera = (!!window.opr && !!opr.addons) || !!window.opera || navigator.userAgent.indexOf(' OPR/') >= 0;
    // Firefox 1.0+
    var isFirefox = typeof InstallTrigger !== 'undefined';
    // Safari 3.0+ "[object HTMLElementConstructor]" 
    var isSafari = /constructor/i.test(window.HTMLElement) || (function (p) { return p.toString() === "[object SafariRemoteNotification]"; })(!window['safari'] || safari.pushNotification);
    // Internet Explorer 6-11
    var isIE = /*@cc_on!@*/false || !!document.documentMode;
    // Edge 20+
    var isEdge = !isIE && !!window.StyleMedia;
    // Chrome 1+
    var isChrome = !!window.chrome && !!window.chrome.webstore;
    // Blink engine detection
    var isBlink = (isChrome || isOpera) && !!window.CSS;

	return browser.prototype._cachedResult =
        isOpera ? 'Opera' :
        isFirefox ? 'Firefox' :
        isSafari ? 'Safari' :
        isChrome ? 'Chrome' :
        isIE ? 'IE' :
        isEdge ? 'Edge' :
        isBlink ? 'Blink' :
        "Don't know";
		};
		
	console.log(browser());

	fetch('https://www.medindia.net/push-service/syncMedChromeEncryptionKey.asp?browser='+ browser() + '&level=main&subscriptionId=' +
    subscriptionIdNew);
        // The push subscription details needed by the application
        // server are now available, and can be sent to it using,
        // for example, an XMLHttpRequest.
      }, function(error) {
        // During development it often helps to log errors to the
        // console. In a production environment it might make sense to
        // also report information about errors back to the
        // application server.
        console.log(error);
      }
    );
  });
//Notification.requestPermission(function(result) {
//  if (result === 'granted') {
//    navigator.serviceWorker.ready.then(function(registration) {
//      //registration.showNotification('Notification with ServiceWorker');
//    });
//  }
//});
